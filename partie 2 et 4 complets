\documentclass{article}
\usepackage{amsmath, amssymb} % Required for mathematical symbols
\usepackage{graphicx} % Required for inserting images

\title{Devoir 2}
\date{19 novembre 2023}

\begin{document}

\maketitle

\section*{Problème 2}

\begin{enumerate}

    \item
    Pour recouvrir l'echiquier de gauche (k = 1) il suffit de le voir comme une matrice $2 \times 2$. Comme le trou est dans la position impair, pair donc dans la coordonnée (1,2) de la matrice, le triomino sera dans les autres cases soit en ((1,1),(2,1), (2,2)).
    Pour recouvrir l'equichiquer de droite (k = 2) on va aussi le voir comme une matrice mais cette fois-ci $4 \times 4$. le premier triomino sera en ((1,1), (1,2), (2,1)), le deuxième en ((1,3), (1,4), (2,4)), le troisième en ((3,1), (4,1), (4,2)), le quatrieme en ((2,2), (2,3), (3,3)) et le cinquième en ((4,3),(4,4),(3,4)).
    
    \item

\subsection*{Cas de base ($k = 0$):}
Pour $k = 0$, nous avons un échiquier $1 \times 1$ avec une seule cellule. La formule devient $3 \mid (2^0 \times 2^0 - 1)$, ce qui se simplifie en $3 \mid (1 - 1)$, confirmant que trois divise zéro.

\subsection*{Cas de base ($k = 1$):}
Pour $k = 1$, nous avons un échiquier $2 \times 2$ avec quatre cases. La formule devient $3 \mid (2^1 \times 2^1 - 1)$, ce qui se simplifie en $3 \mid (4 - 1)$, confirmant que trois divise trois.

\subsection*{Étape inductive:}
Supposons $3 \mid (2^n \times 2^n - 1)$ pour un $k = n$ arbitraire.

Maintenant, nous voulons montrer que $3 \mid (2^{n+1} \times 2^{n+1} - 1)$.

Nous avons $U_n$: $3 \mid (2^n \times 2^n - 1)$.

Considérons maintenant $U_{n+1}$: $3 \mid (2^{n+1} \times 2^{n+1} - 1)$.

Cela peut s'écrire comme $3 \mid (4(2^n \times 2^n - 1) + 3)$.

Puisque $3 \mid (2^n \times 2^n - 1)$, nous pouvons dire $3 \mid (4(2^n \times 2^n - 1))$.

Ajouter 3 à un multiple de 4 ne change pas sa divisibilité par 3.

Par conséquent, $3 \mid (4(2^n \times 2^n - 1) + 3)$.

Par induction, $\forall k \in \mathbb{N}, 3 \mid (2^k \times 2^k - 1)$.


\item Dans l'algorithme suivant on commence par prendre en compte deux cas de base, soit si k est égal à 0, la fonction retourne une liste vide, et si k est égal à 1, elle génère les positions du triomino initial en fonction de la parité de x et y. Ensuite, la fonction entre dans une boucle récursive où, à chaque itération, elle divise le problème en quadrants plus petits en appelant la fonction avec k réduit de 1 elle et le fait jusqu'au cas de base. Les positions des triominos résultantes sont déterminées en fonction de la position du trou ou de la case pleine dans le quadrant du plateau, on place un triomino au milieu de l'echiquier de facon a ce que chaque cadran ait une case pleine ou un trou et ensuite on divise le cadran en 4, et les positions des triominos sont ajoutées à une liste appelée listeARetourner. Ainsi, la fonction construit progressivement les positions des triominos sur le plateau, en prenant en compte les subdivisions récursives et les conditions de parité et retorune une liste contenant des listes avec les coordonnées de position de chaque triomino.

\texttt{PositionsTriominos(k, (x, y)):} \\
    \quad \texttt{listeARetourner = []} \\
    \quad \texttt{Si } \( k = 0 \): \\
    \quad \quad \texttt{Retourner une liste vide} \\
    \quad \texttt{Sinon, si } \( k = 1 \): \\
    \quad \quad \texttt{Si } \( x \) est pair et \( y \) est pair: \\
    \quad \quad \quad \texttt{Ajouter [[x-1, y-1], [x, y-1], [x-1, y]] à listeARetourner} \\
    \quad \quad \texttt{Sinon, si } \( x \) est impair et \( y \) est impair: \\
    \quad \quad \quad \texttt{Ajouter [[x+1, y+1], [x+1, y], [x, y+1]] à listeARetourner} \\
    \quad \texttt{Sinon, si } \( x \) est impair et \( y \) est pair: \\
    \quad \quad \texttt{Ajouter [[x, y-1], [x+1, y], [x+1, y-1]] à listeARetourner} \\
    \quad \texttt{Sinon, si } \( x \) est pair et \( y \) est impair: \\
    \quad \quad \texttt{Ajouter [[x, y+1], [x-1, y], [x-1, y+1]] à listeARetourner} \\
    \quad \texttt{Tant que } \( k > 1 \) \\
    \quad \quad \texttt{PositionsTriominos(k-1, (x, y))} \\
    \quad \texttt{Si } \( x > \frac{k+1}{2} \) \texttt{et} \( y > \frac{k+1}{2} \), \texttt{alors} \\
    \quad \quad \texttt{Ajouter } \(\left[ \left(\frac{k}{2}+1, \frac{k}{2}\right), \left(\frac{k}{2}, \frac{k}{2}\right), \left(\frac{k}{2}, \frac{k}{2}+1\right) \right]\){à listeARetourner} \\
    \quad \texttt{Si } \( x > \frac{k+1}{2} \) \texttt{et} \( y < \frac{k+1}{2} \), \texttt{alors} \\
    \quad \quad \texttt{Ajouter } \(\left[ \left(\frac{k}{2}+1, \frac{k}{2}+1\right), \left(\frac{k}{2}, \frac{k}{2}\right), \left(\frac{k}{2}, \frac{k}{2}+1\right) \right]\) {à listeARetourner}\\
    \quad \texttt{Si } \( x < \frac{k+1}{2} \) \texttt{et} \( y > \frac{k+1}{2} \), \texttt{alors} \\
    \quad \quad \texttt{Ajouter} \(\left[ \left(\frac{k}{2}+1, \frac{k}{2}+1\right), \left(\frac{k}{2}, \frac{k}{2}\right), \left(\frac{k}{2}+1, \frac{k}{2}\right) \right]\) {à listeARetourner} \\
    \quad \texttt{Si } \( x < \frac{k+1}{2} \) \texttt{et} \( y < \frac{k+1}{2} \), \texttt{alors} \\
    \quad \quad \texttt{Ajouter } \(\left[ \left(\frac{k}{2}+1, \frac{k}{2}+1\right), \left(\frac{k}{2}, \frac{k}{2}+1\right), \left(\frac{k}{2}+1, \frac{k}{2}\right) \right]\) {à listeARetourner}

\end{enumerate}

\section*{Problème 4}
\begin{enumerate}
    \item 
    \begin{itemize}
        \item \textbf{Cas de base:} $\forall x \in P, x \in F$
        
        \item \textbf{Constructeur:} Soit $A, B \in F$ \\
        $(A) \in F$ \\
        $\lnot A \in F$ \\
        $A \lor B \in F$ \\
        $A \land B \in F$
    \end{itemize}

    \item \textbf{Fonction de vérification:} \\
    Il y a des expressions primaires (Eprimaire) et des expressions secondaires (Esecondaire) dans chaque expression primaire \\
    
    \textbf{VérificationExpressions (expression primaire):}
    \begin{align*}
        &\text{Si } |E primaire| = 1 \land \text{Eprimaire} \in P \\
        &\quad \text{retourner vrai} \\
        &\text{Si } E primaire \text{ est (Esecondaire)} \land |Eprimaire| = |Esecondaire| + 2 \\
        &\quad \text{retourner } \text{VérificationExpressions}(\text{Eseondaire}) \\
        &\text{Si } E primaire \text{ est $\lnot$ Esecondaire} \land |Eprimaire| = |Esecondaire| + 1 \\
        &\quad \text{retourner } \text{VérificationExpressions}(\text{Esecondaire}) \\
        &\text{Si } Eprimaire \text{ est Esecondaire1 $\lor$ Esecondaire2}  \land |Eprimaire| = |Esecondaire1 \lor Esecondaire2| + 1 \\
        &\quad \text{retourner } \text{VérificationExpressions}(\text{Esecondaire1}) \land \text{VérificationExpressions}(\text{Esecondaire2}) \\
        &\text{Si } Eprimaire \text{ est Esecondaire1 $\land$ Esecondaire2} \land |Eprimaire| = |Esecondaire1 \land Esecondaire2| + 1\\
        &\quad \text{retourner } \text{VérificationExpressions}(\text{Esecondaire1}) \land \text{VérificationExpressions}(\text{Esecondaire2}) \\
        &\text{Sinon } \\
        &\quad \text{retourner Faux }
    \end{align*}
    \item
    \forall \(A \in F\), \(\implies\text{Vérification}(A)\) retourne vrai.
\subsection*{Cas de base:}
    \begin{align*}
        &\text{Si } A \text{ est tel que } A= (p) \text{ ou } p \text{ appartient à } P, \text{Vérification}(A) \text{ retourne vrai}
    \end{align*}

\subsection*{Étape inductive:}
    Supposons que l'algorithme fonctionne correctement pour une expression de taille inférieure à \(n\). Montrons qu'il fonctionne correctement pour une expression de taille \(n\). Considérons l'expression \(A\) telle que \(|A| = n\) et examinons tous les cas possibles:

    \begin{itemize}
        \item Si \(A\) est une expression entre parenthèses \((\text{expression})\), l'algorithme vérifie récursivement l'expression à l'intérieur des parenthèses. Par l'hypothèse d'induction, si l'expression à l'intérieur des parenthèses est correcte, alors l'algorithme renverra également vrai pour \(A\).
        \item Si \(A\) est une négation \((\lnot\text{expression})\), l'algorithme vérifie récursivement l'expression après la négation. Encore une fois, par l'hypothèse d'induction, si l'expression après la négation est correcte, alors l'algorithme renverra vrai pour \(A\).
        \item Si \(A\) est une conjonction \((\text{expression1}\land\text{expression2})\) ou une disjonction \((\text{expression1}\lor\text{expression2})\), l'algorithme vérifie les deux parties de la conjonction ou de la disjonction. Par l'hypothèse d'induction, si les deux parties sont correctes, alors l'algorithme renverra vrai pour \(A\).
    \end{itemize}

    Ainsi, à chaque cas, l'algorithme renvoie la réponse correcte, donc \(\text{Vérification}(A)\) est valable pour toutes les expressions logiques de \(F\).

    \item
\subsection*{Cas de base:}

\forall x \in P, x \in F$ est l'expressions la plus simple de F ne contenant pas de parenthèses donc pour ces expressions le nombre de parenthèses ouvrante et fermante est le même soit zéro.

\subsection*{Étape inductive:}

Supposons $A, B \in  F$ des expression qui possèdent autant de parenthèses ouvrantes que fermante, disons de complexité inferieure à n. \\
\begin{itemize}

\item Lorsqu'on forme une expression à partir de deux expression A et B soit une expression de complexité égale à n à l'aide d'un operateur logique $\lor$ et $\land$ elles conservent individuellement le même nombre de parenthèses. \\ 

\item Si on place l'expression logique entre parenthèses, elles font toujours partie de F et possède le meme nombre de parenthèse ouvrante que fermante. \\

\item Si on fait la negation d'une expression logique $\lnot A$, elle possède toujours le meme nombre de parenthèses soit celui de A. \\
\end{itemize}

Ainsi, chaque opération qui construit une nouvelle expression à partir d'expressions plus petites préserve la propriété des parenthèses équilibrées.

    
\end{enumerate}

\end{document}
